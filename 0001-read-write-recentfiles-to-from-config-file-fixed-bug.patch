From f327d2ddee7fbca3a24d911a802d8065d5cbbc9f Mon Sep 17 00:00:00 2001
From: Yvan Volochine <yvan.volochine@gmail.com>
Date: Thu, 17 Mar 2011 18:15:53 +0100
Subject: [PATCH] read/write recentfiles to/from config file, fixed bug 3192731 (gui hangs if recent files does not exist)

---
 tcl/pd-gui.tcl          |    8 +++-
 tcl/pd_guiprefs.tcl     |  105 +++++++++++++++++++++++++++++++++++++++++++++++
 tcl/pd_menus.tcl        |   30 ++++++++-----
 tcl/pkgIndex.tcl        |    2 +
 tcl/wheredoesthisgo.tcl |   13 +++---
 5 files changed, 138 insertions(+), 20 deletions(-)
 create mode 100644 tcl/pd_guiprefs.tcl

diff --git a/tcl/pd-gui.tcl b/tcl/pd-gui.tcl
index 39b260f..eb753f3 100755
--- a/tcl/pd-gui.tcl
+++ b/tcl/pd-gui.tcl
@@ -46,12 +46,16 @@ package require pdtk_canvas
 package require pdtk_text
 # TODO eliminate this kludge:
 package require wheredoesthisgo
+package require pd_guiprefs
 
 #------------------------------------------------------------------------------#
 # import functions into the global namespace
 
 # make global since they are used throughout    
 namespace import ::pd_menucommands::* 
+# not sure if I should do that (YVAN)
+# FIXME
+namespace import ::pd_guiprefs::*
 
 # import into the global namespace for backwards compatibility
 namespace import ::pd_connect::pdsend
@@ -167,9 +171,9 @@ set dsp 0
 set meters 0
 # the toplevel window that currently is on top and has focus
 set focused_window .
-# store that last 10 files that were opened
+# store that last 5 files that were opened
 set recentfiles_list {}
-set total_recentfiles 10
+set total_recentfiles 5
 # keep track of the location of popup menu for PatchWindows, in canvas coords
 set popup_xcanvas 0
 set popup_ycanvas 0
diff --git a/tcl/pd_guiprefs.tcl b/tcl/pd_guiprefs.tcl
new file mode 100644
index 0000000..feff6a2
--- /dev/null
+++ b/tcl/pd_guiprefs.tcl
@@ -0,0 +1,105 @@
+#
+# Copyright (c) 1997-2009 Miller Puckette.
+# Copyright (c) 2011 Yvan Volochine.
+#(c) 2008 WordTech Communications LLC. License: standard Tcl license, http://www.tcl.tk/software/tcltk/license.html
+
+package provide pd_guiprefs 0.1
+
+namespace eval ::pd_guiprefs:: {
+    namespace export get_recentfiles
+    variable recents_file "recentfiles.conf"
+}
+
+variable pd_confdir
+
+
+
+# ------------------------------------------------------------------------------
+# look for ~/.pd directory and create it if needed
+#
+proc prepare_configdir {} {
+    variable pd_confdir
+
+    switch -- $::windowingsystem {
+        "aqua" { set pf_confdir "~/Library/Application Support/pd"}
+        "win32" { set pd_confdir "~/Application Data/pd"}
+        "x11" { set pd_confdir "~/.config/pd"}
+    }
+    set dirname [file join $::env(HOME) $pd_confdir]
+    if {[file isdirectory $dirname] != 1} {
+	file mkdir $dirname
+	::pdwindow::verbose "$dirname was created.\n"
+    }
+}
+
+# ------------------------------------------------------------------------------
+# append pd config files to pd config dir
+#
+proc configpath {afile} {
+    variable pd_confdir
+
+    set filename [file join $::env(HOME) $pd_confdir $afile]
+    return $filename
+}
+# ------------------------------------------------------------------------------
+# read a config file and return its lines splitted
+#
+proc get_configs {afile} {
+    set confs {}
+    if {
+	[file exists $afile] == 1
+	&& [file readable $afile]
+    } {
+	set fl [open $afile r]
+	while {[gets $fl line] >= 0} {
+	    lappend confs $line
+	}
+	close $fl
+    }
+    return $confs
+}
+
+# ------------------------------------------------------------------------------
+# write a list of configs to a config file
+#
+proc write_configfile {afile data} {
+    set data [string trimright $data ","]
+    set fl [open $afile w]
+    puts -nonewline $fl $data
+    close $fl
+}
+
+# ------------------------------------------------------------------------------
+# write recent files to ~/.pd/recentfiles.conf
+#
+proc ::pd_guiprefs::write_recentfiles {} {
+    variable recents_file
+
+    set data [join $::recentfiles_list, "\n"]
+    set filename [configpath $recents_file]
+    write_configfile $filename $data
+}
+
+# ------------------------------------------------------------------------------
+# read recent files in ~/.pd/recentfiles.conf and assign to global
+#
+proc ::pd_guiprefs::init_recentfiles {} {
+    variable recents_file
+
+    prepare_configdir
+    set filename [configpath $recents_file]
+    set ::recentfiles_list [get_configs $filename]
+}
+
+# ------------------------------------------------------------------------------
+# this is called when opening a document (wheredoesthisshouldgo.tcl)
+#
+proc ::pd_guiprefs::update_recentfiles {afile} {
+        # remove duplicates first
+        set index [lsearch -exact $::recentfiles_list $afile]
+        set ::recentfiles_list [lreplace $::recentfiles_list $index $index]
+	# append new one at the end, list is reversed when filling the menu
+        lappend ::recentfiles_list $afile
+        set ::recentfiles_list [lrange $::recentfiles_list 0 $::total_recentfiles]
+        ::pd_menus::update_recentfiles_menu
+}
\ No newline at end of file
diff --git a/tcl/pd_menus.tcl b/tcl/pd_menus.tcl
index fc617df..f6a4644 100644
--- a/tcl/pd_menus.tcl
+++ b/tcl/pd_menus.tcl
@@ -123,7 +123,7 @@ proc ::pd_menus::configure_for_dialog {mytoplevel} {
 # ------------------------------------------------------------------------------
 # menu building functions
 proc ::pd_menus::build_file_menu {mymenu} {
-    # run the platform-specific build_file_menu_* procs first, the config them
+    # run the platform-specific build_file_menu_* procs first, then config them
     [format build_file_menu_%s $::windowingsystem] $mymenu
     $mymenu entryconfigure [_ "New"]        -command {menu_new}
     $mymenu entryconfigure [_ "Open"]       -command {menu_open}
@@ -133,6 +133,10 @@ proc ::pd_menus::build_file_menu {mymenu} {
     $mymenu entryconfigure [_ "Close"]      -command {menu_send_float $::focused_window menuclose 0}
     $mymenu entryconfigure [_ "Message..."] -command {menu_message_dialog}
     $mymenu entryconfigure [_ "Print..."]   -command {menu_print $::focused_window}
+    # read recentfiles from config file
+    ::pd_guiprefs::init_recentfiles
+    # update recentfiles menu ($write is false because we just read the config file)
+    ::pd_menus::update_recentfiles_menu false
 }
 
 proc ::pd_menus::build_edit_menu {mymenu} {
@@ -326,13 +330,13 @@ proc ::pd_menus::update_undo_on_menu {mytoplevel} {
 }
 
 # ------------------------------------------------------------------------------
-# update the menu entries for opening recent files
-proc ::pd_menus::update_recentfiles_menu {} {
+# update the menu entries for opening recent files ($write should always be true except the first time when pd is opened)
+proc ::pd_menus::update_recentfiles_menu {{write true}} {
     variable menubar
     switch -- $::windowingsystem {
-        "aqua" {::pd_menus::update_openrecent_menu_aqua .openrecent}
-        "win32" {update_recentfiles_on_menu $menubar.file}
-        "x11" {update_recentfiles_on_menu $menubar.file}
+        "aqua" {::pd_menus::update_openrecent_menu_aqua .openrecent $write}
+        "win32" {update_recentfiles_on_menu $menubar.file $write}
+        "x11" {update_recentfiles_on_menu $menubar.file $write}
     }
 }
 
@@ -341,7 +345,7 @@ proc ::pd_menus::clear_recentfiles_menu {} {
     ::pd_menus::update_recentfiles_menu
 }
 
-proc ::pd_menus::update_openrecent_menu_aqua {mymenu} {
+proc ::pd_menus::update_openrecent_menu_aqua {mymenu {write}} {
     if {! [winfo exists $mymenu]} {menu $mymenu}
     $mymenu delete 0 end
     $mymenu add  separator
@@ -352,24 +356,30 @@ proc ::pd_menus::update_openrecent_menu_aqua {mymenu} {
         $mymenu insert 0 command -label [file tail $filename] \
             -command "open_file {$filename}"
     }
+    # write to config file
+    if {write == true} { ::pd_gui_prefs::write_recentfiles }
 }
 
 # this expects to be run on the File menu, and to insert above the last separator
-proc ::pd_menus::update_recentfiles_on_menu {mymenu} {
+proc ::pd_menus::update_recentfiles_on_menu {mymenu {write}} {
     set lastitem [$mymenu index end]
     set i 1
     while {[$mymenu type [expr $lastitem-$i]] ne "separator"} {incr i}
     set bottom_separator [expr $lastitem-$i]
     incr i
+
     while {[$mymenu type [expr $lastitem-$i]] ne "separator"} {incr i}
     set top_separator [expr $lastitem-$i]
     if {$top_separator < [expr $bottom_separator-1]} {
         $mymenu delete [expr $top_separator+1] [expr $bottom_separator-1]
     }
+
     foreach filename $::recentfiles_list {
         $mymenu insert [expr $top_separator+1] command \
             -label [file tail $filename] -command "open_file {$filename}"
     }
+    # write to config file
+    if {$write == true} { ::pd_guiprefs::write_recentfiles }
 }
 
 
@@ -473,8 +483,7 @@ proc ::pd_menus::create_apple_menu {mymenu} {
     $mymenu.apple add cascade -label [_ "Preferences"] \
         -menu $mymenu.apple.preferences
     # this needs to be last for things to function properly
-    $mymenu add cascade -label "Apple" -menu $mymenu.apple
-    
+    $mymenu add cascade -label "Apple" -menu $mymenu.apple    
 }
 
 proc ::pd_menus::build_file_menu_aqua {mymenu} {
@@ -583,4 +592,3 @@ proc ::pd_menus::build_window_menu_win32 {mymenu} {
 }
 
 # the "Help" does not have cross-platform differences
-
diff --git a/tcl/pkgIndex.tcl b/tcl/pkgIndex.tcl
index 5f4921b..b349da2 100644
--- a/tcl/pkgIndex.tcl
+++ b/tcl/pkgIndex.tcl
@@ -33,3 +33,5 @@ package ifneeded pdtk_text 0.1 [list source [file join $dir pdtk_text.tcl]]
 package ifneeded scrollbox 0.1 [list source [file join $dir scrollbox.tcl]]
 package ifneeded scrollboxwindow 0.1 [list source [file join $dir scrollboxwindow.tcl]]
 package ifneeded wheredoesthisgo 0.1 [list source [file join $dir wheredoesthisgo.tcl]]
+package ifneeded pd_guiprefs 0.1 [list source [file join $dir pd_guiprefs.tcl]]
+
diff --git a/tcl/wheredoesthisgo.tcl b/tcl/wheredoesthisgo.tcl
index 1e9e034..5327b78 100644
--- a/tcl/wheredoesthisgo.tcl
+++ b/tcl/wheredoesthisgo.tcl
@@ -6,15 +6,14 @@ package provide wheredoesthisgo 0.1
 proc open_file {filename} {
     set directory [file normalize [file dirname $filename]]
     set basename [file tail $filename]
-    if {[regexp -nocase -- "\.(pd|pat|mxt)$" $filename]} {
+    if {
+	[file exists $filename]
+	&& [regexp -nocase -- "\.(pd|pat|mxt)$" $filename]
+    } {
         ::pdtk_canvas::started_loading_file [format "%s/%s" $basename $filename]
         pdsend "pd open [enquote_path $basename] [enquote_path $directory]"
-        # remove duplicates first, then the duplicate added after to the top
-        set index [lsearch -exact $::recentfiles_list $filename]
-        set ::recentfiles_list [lreplace $::recentfiles_list $index $index]
-        lappend ::recentfiles_list $filename
-        set ::recentfiles_list [lrange $::recentfiles_list 0 $::total_recentfiles]
-        ::pd_menus::update_recentfiles_menu
+	# this is now done in pd_guiprefs
+	::pd_guiprefs::update_recentfiles $filename
     } {
         ::pdwindow::post [format [_ "Ignoring '%s': doesn't look like a Pd-file"] $filename]
     }
-- 
1.7.4.1

