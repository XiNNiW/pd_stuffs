From ec9f57a3327e0d3aba790ee8e6c74a2bea593ab3 Mon Sep 17 00:00:00 2001
From: Yvan Volochine <yvan.volochine@gmail.com>
Date: Thu, 31 Mar 2011 16:43:12 +0200
Subject: [PATCH] auto-completion_ALPHA

---
 po/Makefile.am        |    2 +-
 tcl/Makefile.am       |    2 +-
 tcl/pd-gui.tcl        |   18 +++++++++
 tcl/pd_bindings.tcl   |    6 +++
 tcl/pd_completion.tcl |   99 +++++++++++++++++++++++++++++++++++++++++++++++++
 tcl/pdtk_canvas.tcl   |    7 +++
 tcl/pdtk_text.tcl     |   34 ++++++++++++++++-
 tcl/pkgIndex.tcl      |    1 +
 8 files changed, 165 insertions(+), 4 deletions(-)
 create mode 100644 tcl/pd_completion.tcl

diff --git a/po/Makefile.am b/po/Makefile.am
index 7ab45ee..828be43 100644
--- a/po/Makefile.am
+++ b/po/Makefile.am
@@ -9,7 +9,7 @@ if MACOSX
   PATH := /sw/lib/gettext-tools-0.17/bin:${PATH}
 endif
 
-TCLFILES = apple_events.tcl dialog_canvas.tcl dialog_gatom.tcl dialog_path.tcl pd_bindings.tcl pd_menus.tcl pdwindow.tcl scrollboxwindow.tcl AppMain.tcl dialog_data.tcl dialog_iemgui.tcl dialog_startup.tcl pd_connect.tcl pdtk_array.tcl pkgIndex.tcl wheredoesthisgo.tcl dialog_array.tcl dialog_find.tcl dialog_message.tcl helpbrowser.tcl pdtk_canvas.tcl pkg_mkIndex.tcl dialog_audio.tcl dialog_font.tcl dialog_midi.tcl opt_parser.tcl pd_menucommands.tcl pdtk_text.tcl scrollbox.tcl 
+TCLFILES = apple_events.tcl dialog_canvas.tcl dialog_gatom.tcl dialog_path.tcl pd_bindings.tcl pd_menus.tcl pdwindow.tcl scrollboxwindow.tcl AppMain.tcl dialog_data.tcl dialog_iemgui.tcl dialog_startup.tcl pd_connect.tcl pdtk_array.tcl pkgIndex.tcl wheredoesthisgo.tcl dialog_array.tcl dialog_find.tcl dialog_message.tcl helpbrowser.tcl pdtk_canvas.tcl pkg_mkIndex.tcl dialog_audio.tcl dialog_font.tcl dialog_midi.tcl opt_parser.tcl pd_completion.tcl pd_menucommands.tcl pdtk_text.tcl scrollbox.tcl 
 
 FILES=$(addprefix ../tcl/, $(TCLFILES))
 
diff --git a/tcl/Makefile.am b/tcl/Makefile.am
index 65780eb..e1547c4 100644
--- a/tcl/Makefile.am
+++ b/tcl/Makefile.am
@@ -10,7 +10,7 @@ bin_SCRIPTS = pd-gui.tcl
 
 libpdtcldir = $(pkglibdir)/tcl
 dist_libpdtcl_SCRIPTS = pd-gui.tcl
-dist_libpdtcl_DATA = apple_events.tcl dialog_canvas.tcl dialog_gatom.tcl dialog_path.tcl pd_bindings.tcl pd_menus.tcl pdwindow.tcl scrollboxwindow.tcl AppMain.tcl dialog_data.tcl dialog_iemgui.tcl dialog_startup.tcl pd_connect.tcl pdtk_array.tcl pkgIndex.tcl wheredoesthisgo.tcl dialog_array.tcl dialog_find.tcl dialog_message.tcl helpbrowser.tcl pdtk_canvas.tcl pkg_mkIndex.tcl dialog_audio.tcl dialog_font.tcl dialog_midi.tcl opt_parser.tcl pd_menucommands.tcl pdtk_text.tcl scrollbox.tcl pd.ico
+dist_libpdtcl_DATA = apple_events.tcl dialog_canvas.tcl dialog_gatom.tcl dialog_path.tcl pd_bindings.tcl pd_menus.tcl pdwindow.tcl scrollboxwindow.tcl AppMain.tcl dialog_data.tcl dialog_iemgui.tcl dialog_startup.tcl pd_connect.tcl pdtk_array.tcl pkgIndex.tcl wheredoesthisgo.tcl dialog_array.tcl dialog_find.tcl dialog_message.tcl helpbrowser.tcl pdtk_canvas.tcl pkg_mkIndex.tcl dialog_audio.tcl dialog_font.tcl dialog_midi.tcl opt_parser.tcl pd_completion.tcl pd_menucommands.tcl pdtk_text.tcl scrollbox.tcl pd.ico
 
 etags: TAGS
 	etags --append --language=none --regex="/proc[ \t]+\([^ \t]+\)/\1/" *.tcl
diff --git a/tcl/pd-gui.tcl b/tcl/pd-gui.tcl
index 39b260f..ae75c32 100755
--- a/tcl/pd-gui.tcl
+++ b/tcl/pd-gui.tcl
@@ -24,6 +24,7 @@ package require msgcat
 
 # Pd's packages are stored in the same directory as the main script (pd-gui.tcl)
 set auto_path [linsert $auto_path 0 [file dirname [info script]]]
+package require pd_completion
 package require pd_connect
 package require pd_menus
 package require pd_bindings
@@ -54,6 +55,8 @@ package require wheredoesthisgo
 namespace import ::pd_menucommands::* 
 
 # import into the global namespace for backwards compatibility
+# FIXME: next line (yvan)
+namespace import ::pd_completion::*
 namespace import ::pd_connect::pdsend
 namespace import ::pdwindow::pdtk_post
 namespace import ::pdwindow::pdtk_pd_dio
@@ -209,6 +212,20 @@ set ::undo_action "no"
 set ::redo_action "no"
 set ::undo_toplevel "."
 
+# autocompletion
+set ::new_object false
+set ::current_text ""
+set ::all_externals {}
+set ::completions {}
+set ::current_canvas ""
+set ::current_tag ""
+set ::lock_motion false
+set ::motionx 0
+set ::motiony 0
+set ::old_text ""
+set ::i 0
+set ::cycle false
+
 #------------------------------------------------------------------------------#
 # coding style
 #
@@ -501,6 +518,7 @@ proc pdtk_pd_startup {major minor bugfix test
     ::pd_menus::configure_for_pdwindow
     load_startup_plugins
     open_filestoopen
+    ::pd_completion::init
     set ::done_init 1
 }
 
diff --git a/tcl/pd_bindings.tcl b/tcl/pd_bindings.tcl
index 82ac350..c3b43d5 100644
--- a/tcl/pd_bindings.tcl
+++ b/tcl/pd_bindings.tcl
@@ -77,6 +77,9 @@ proc ::pd_bindings::global_bindings {} {
     bind all <$::modifier-Shift-Key-W> {menu_send_float %W menuclose 1}
     bind all <$::modifier-Shift-Key-Z> {menu_redo}
 
+    # Tab for autocompletion
+    bind all <Tab> {::pd_completion::trigger}
+
     # OS-specific bindings
     if {$::windowingsystem eq "aqua"} {
         # Cmd-m = Minimize and Cmd-t = Font on Mac OS X for all apps
@@ -263,6 +266,9 @@ proc ::pd_bindings::sendkey {window state key iso shift} {
     set mytoplevel [winfo toplevel $window]
     if {[winfo class $mytoplevel] eq "PatchWindow"} {
         pdsend "$mytoplevel key $state $key $shift"
+        # auto-completion
+        # something was typed in so reset $::cycle
+        if {$key != 9} {set ::cycle false}
     }
     # TODO send to 'pd key' for global key events in Pd?
 }
diff --git a/tcl/pd_completion.tcl b/tcl/pd_completion.tcl
new file mode 100644
index 0000000..8b77b10
--- /dev/null
+++ b/tcl/pd_completion.tcl
@@ -0,0 +1,99 @@
+# Copyright (c) 1997-2009 Miller Puckette.
+# Copyright (c) 2011 Yvan Volochine.
+#(c) 2008 WordTech Communications LLC. License: standard Tcl license, http://www.tcl.tk/software/tcltk/license.html
+
+package provide pd_completion 0.1
+
+namespace eval ::pd_completion:: {
+    namespace export init
+}
+
+
+proc ::pd_completion::init {} {
+    list_all_externals
+}
+
+proc ::pd_completion::trigger {} {
+    if {$::new_object} {
+	set pattern [string map {" " ""} $::current_text]
+        find_external $pattern
+    }
+}
+
+proc list_all_externals {} {
+    # TODO: merge this with gui prefs
+    list_pd_internals "~/.config/pure-data/pd_objects.conf"
+    list_user_externals
+}
+
+proc list_pd_internals {afile} {
+    set filename [file join $afile]
+    if {
+        [file exists $filename]
+        && [file readable $filename]
+    } {
+        set fl [open $filename r]
+        while {[gets $fl line] >= 0} {
+	    if {[string index $line 0] ne "#"} {
+                lappend ::all_externals $line
+	    }
+        }
+        close $fl
+    }
+}
+
+proc list_user_externals {} {
+    foreach pathdir [concat $::sys_searchpath $::sys_staticpath] {
+        set dir [file normalize $pathdir]
+        if { ! [file isdirectory $dir]} {continue}
+        foreach filename [glob -directory $dir -nocomplain -types {f} -- \
+                              *.pd_linux] {
+            set basename [file tail $filename]
+            set name [file rootname $basename]
+            lappend ::all_externals $name
+        }
+    }
+    # sort them for a quicker search later
+    set ::all_externals [lsort $::all_externals]
+    #puts "all: $::all_externals"
+    #::pd_guipref
+}
+
+proc find_external {text} {
+    #puts "searching for $text"
+    #puts "cycling is $::cycle"
+    set length [llength $::completions]
+
+    if {$text ne "" && $::cycle == false} {
+        set ::completions [lsearch -all -inline -glob $::all_externals $text*]
+        set ::old_text $text
+        set ::cycle true
+        set length [llength $::completions]
+        set ::i 0
+    }
+
+    if {$::cycle && $length > 0} {
+        if {$::i == $length} {
+            set new_text $::old_text
+            set ::i -1
+        } {
+            set new_text [lindex $::completions $::i]
+        }
+        write_text $new_text
+        set ::i [expr $::i + 1]
+    }
+}
+
+# write into an object box
+# simulate a dble-click to get "real" text selection and be able to replace it
+proc write_text {text} {
+    set mytoplevel [winfo toplevel $::current_canvas]
+    set x [expr $::motionx + 5]
+    set y [expr $::motiony + 5]
+    pdsend "$mytoplevel mouse [$::current_canvas canvasx $x] [$::current_canvas canvasy $y] 1 0"
+    pdsend "$mytoplevel mouseup [$::current_canvas canvasx $x] [$::current_canvas canvasy $y] 1"
+    pdsend "$mytoplevel mouse [$::current_canvas canvasx $x] [$::current_canvas canvasy $y] 1 0"
+    pdsend "$mytoplevel mouseup [$::current_canvas canvasx $x] [$::current_canvas canvasy $y] 1"
+    # write
+    pdtk_pastetext_completion $text
+}
\ No newline at end of file
diff --git a/tcl/pdtk_canvas.tcl b/tcl/pdtk_canvas.tcl
index c1a8542..cfea5be 100644
--- a/tcl/pdtk_canvas.tcl
+++ b/tcl/pdtk_canvas.tcl
@@ -159,11 +159,18 @@ proc ::pdtk_canvas::pdtk_canvas_menuclose {mytoplevel reply_to_pd} {
 proc pdtk_canvas_motion {tkcanvas x y mods} {
     set mytoplevel [winfo toplevel $tkcanvas]
     pdsend "$mytoplevel motion [$tkcanvas canvasx $x] [$tkcanvas canvasy $y] $mods"
+    # FIXME (yvan) calling "if" that often looks nasty
+    if {$::lock_motion == false} {
+        set ::motionx $x
+        set ::motiony $y
+    }
 }
 
 proc pdtk_canvas_mouse {tkcanvas x y b f} {
     set mytoplevel [winfo toplevel $tkcanvas]
     pdsend "$mytoplevel mouse [$tkcanvas canvasx $x] [$tkcanvas canvasy $y] $b $f"
+    # auto-completion: save mouse position if we have a new object from CTRL-1
+    if {$::new_object} {set ::lock_motion true}
 }
 
 proc pdtk_canvas_mouseup {tkcanvas x y b} {
diff --git a/tcl/pdtk_text.tcl b/tcl/pdtk_text.tcl
index 5818926..c6cab90 100644
--- a/tcl/pdtk_text.tcl
+++ b/tcl/pdtk_text.tcl
@@ -18,11 +18,22 @@ proc pdtk_text_new {tkcanvas tags x y text font_size color} {
         $tkcanvas bind $mytag <Control-a> "$tkcanvas icursor $mytag 0"
         $tkcanvas bind $mytag <Control-e> "$tkcanvas icursor $mytag end"
     }
+    # auto-completion: store the new object
+    set ::current_tag $mytag
+    #if {$::lock_motion} {
+    #    set ::motionx [expr $::motionx + 10]
+    #    set ::motiony [expr $::motiony + 10]
+    #}
 }
 
 # change the text in an existing text box
 proc pdtk_text_set {tkcanvas tag text} {
     $tkcanvas itemconfig $tag -text $text
+    # store typed text for autocompletion
+    set ::current_text $text
+    set ::current_canvas $tkcanvas
+    # useless ?
+    set ::current_tag $tag
 }
 
 # paste into an existing text box by literally "typing" the contents of the
@@ -47,7 +58,26 @@ proc pdtk_text_selectall {tkcanvas mytag} {
 # de/activate a text box for editing based on $editing flag
 proc pdtk_text_editing {mytoplevel tag editing} {
     set tkcanvas [tkcanvas_name $mytoplevel]
-    if {$editing == 0} {selection clear $tkcanvas}
+    if {$editing == 0} {
+        selection clear $tkcanvas
+	# auto-completion
+        set ::completions {}
+        set ::new_object false
+	set ::lock_motion false
+	set ::cycle false
+    } {
+        set ::editingtext($mytoplevel) $editing
+        # FIXME (yvan) I should use $::editingtext
+        set ::new_object $editing
+    }
     $tkcanvas focus $tag
-    set ::editingtext($mytoplevel) $editing
 }
+
+# simulate a paste from pd_completion
+proc pdtk_pastetext_completion {txt} {
+    for {set i 0} {$i < [string length $txt]} {incr i 1} {
+        set cha [string index $txt $i]
+        scan $cha %c keynum
+        pdsend "pd key 1 $keynum 0"
+    }
+}
\ No newline at end of file
diff --git a/tcl/pkgIndex.tcl b/tcl/pkgIndex.tcl
index 5f4921b..4fbfdf2 100644
--- a/tcl/pkgIndex.tcl
+++ b/tcl/pkgIndex.tcl
@@ -26,6 +26,7 @@ package ifneeded dialog_startup 0.1 [list source [file join $dir dialog_startup.
 package ifneeded helpbrowser 0.1 [list source [file join $dir helpbrowser.tcl]]
 package ifneeded opt_parser 0.1 [list source [file join $dir opt_parser.tcl]]
 package ifneeded pdwindow 0.1 [list source [file join $dir pdwindow.tcl]]
+package ifneeded pd_completion 0.1 [list source [file join $dir pd_completion.tcl]]
 package ifneeded pd_menucommands 0.1 [list source [file join $dir pd_menucommands.tcl]]
 package ifneeded pd_menus 0.1 [list source [file join $dir pd_menus.tcl]]
 package ifneeded pdtk_canvas 0.1 [list source [file join $dir pdtk_canvas.tcl]]
-- 
1.7.4.1

